// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_dao.go -source=interface.go
//

// Package mock_dal is a generated GoMock package.
package mock_dal

import (
	context "context"
	reflect "reflect"

	entity "github.com/jiale1029/transaction/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountDAO is a mock of AccountDAO interface.
type MockAccountDAO struct {
	ctrl     *gomock.Controller
	recorder *MockAccountDAOMockRecorder
}

// MockAccountDAOMockRecorder is the mock recorder for MockAccountDAO.
type MockAccountDAOMockRecorder struct {
	mock *MockAccountDAO
}

// NewMockAccountDAO creates a new mock instance.
func NewMockAccountDAO(ctrl *gomock.Controller) *MockAccountDAO {
	mock := &MockAccountDAO{ctrl: ctrl}
	mock.recorder = &MockAccountDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountDAO) EXPECT() *MockAccountDAOMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountDAO) CreateAccount(arg0 context.Context, arg1 string, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountDAOMockRecorder) CreateAccount(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountDAO)(nil).CreateAccount), arg0, arg1, arg2, arg3)
}

// GetAccount mocks base method.
func (m *MockAccountDAO) GetAccount(arg0 context.Context, arg1 string) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountDAOMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountDAO)(nil).GetAccount), arg0, arg1)
}

// GetAllAccounts mocks base method.
func (m *MockAccountDAO) GetAllAccounts(arg0 context.Context) ([]*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", arg0)
	ret0, _ := ret[0].([]*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockAccountDAOMockRecorder) GetAllAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockAccountDAO)(nil).GetAllAccounts), arg0)
}

// GetAllTransactions mocks base method.
func (m *MockAccountDAO) GetAllTransactions(arg0 context.Context) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions", arg0)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactions indicates an expected call of GetAllTransactions.
func (mr *MockAccountDAOMockRecorder) GetAllTransactions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockAccountDAO)(nil).GetAllTransactions), arg0)
}

// GetTransaction mocks base method.
func (m *MockAccountDAO) GetTransaction(arg0 context.Context, arg1 string) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockAccountDAOMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockAccountDAO)(nil).GetTransaction), arg0, arg1)
}

// SubmitTransaction mocks base method.
func (m *MockAccountDAO) SubmitTransaction(arg0 context.Context, arg1, arg2 string, arg3, arg4 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransaction indicates an expected call of SubmitTransaction.
func (mr *MockAccountDAOMockRecorder) SubmitTransaction(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransaction", reflect.TypeOf((*MockAccountDAO)(nil).SubmitTransaction), arg0, arg1, arg2, arg3, arg4)
}
